// Server.cs

 class Program
    {
        static void Main(string[] args)
        {
            //Trigger the method PrintIncomingMessage when a packet of type 'Message' is received
            //We expect the incoming object to be a string which we state explicitly by using <string>
            //NetworkComms.AppendGlobalIncomingPacketHandler<string>("Message", PrintIncomingMessage);
            //Start listening for incoming connections
            Connection.StartListening(ConnectionType.TCP, new System.Net.IPEndPoint(System.Net.IPAddress.Any, 0));

            //Print out the IPs and ports we are now listening on
            Console.WriteLine("Server listening for TCP connection on:");
            foreach (System.Net.IPEndPoint localEndPoint in Connection.ExistingLocalListenEndPoints(ConnectionType.TCP))
                Console.WriteLine("{0}:{1}", localEndPoint.Address, localEndPoint.Port);

            //Let the user close the server
            Console.WriteLine("\nPress any key to close server.");
            Console.ReadKey(true);

            //We have used NetworkComms so we should ensure that we correctly call shutdown
            NetworkComms.Shutdown();
        }

        /// <summary>
        /// Writes the provided message to the console window
        /// </summary>
        /// <param name="header">The packet header associated with the incoming message</param>
        /// <param name="connection">The connection used by the incoming message</param>
        /// <param name="message">The message to be printed to the console</param>
        private static void PrintIncomingMessage(PacketHeader header, Connection connection, string message)
        {
            Console.WriteLine("\nA message was received from " + connection.ToString() + " which said '" + message + "'.");
        }
    }
    
    
    
    //Client.cs
    /*
      use this for info. http://www.networkcomms.net/synchronous-send-and-receive/
    */
    
      static void Main(string[] args)
        {

            

            //Request server IP and port number
            Console.WriteLine("Please enter the server IP and port in the format 192.168.0.1:10000 and press return:");
            string serverInfo = Console.ReadLine();

            //Parse the necessary information out of the provided string
            string serverIP = serverInfo.Split(':').First();
            int serverPort = int.Parse(serverInfo.Split(':').Last());

            //NetworkComms.SendObject("Message", serverIP, serverPort, "THIS IS TEST MESSAGE");

            var receiveBy = NetworkComms.SendReceiveObject<string>("Message", "CustomObjectReply", 1000);



            ////Keep a loopcounter
            //int loopCounter = 1;
            //while (true)
            //{
            //    //Write some information to the console window
            //    string messageToSend = "This is message #" + loopCounter;
            //    Console.WriteLine("Sending message to server saying '" + messageToSend + "'");

            //    //Send the message in a single line
            //    NetworkComms.SendObject("Message", serverIP, serverPort, messageToSend);

            //    //Check if user wants to go around the loop
            //    Console.WriteLine("\nPress q to quit or any other key to send another message.");
            //    if (Console.ReadKey(true).Key == ConsoleKey.Q) break;
            //    else loopCounter++;
            //}

            //We have used comms so we make sure to call shutdown
            Console.ReadKey();

            NetworkComms.Shutdown();
        }
